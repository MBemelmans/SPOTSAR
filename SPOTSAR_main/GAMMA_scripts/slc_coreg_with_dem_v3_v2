#!/bin/csh

if ($#argv == 0) then
  echo " "
  echo " usage: slc_coreg_with_dem_v3 ref_file sec_file DEM DEM_PAR demlat demlon RLKS ALKS"
  echo " e.g. slc_coreg_with_dem_v3 c20200121 c20200127 DEM.dem DEM.dem_par 1 1 4 2 "
  echo " Processes 2 SLC files for coregistration using external DEM "
  echo " Does the image co-registration between two dates"
  echo " results stored in existing OFFSET_PAIRS folder (in {ref_file}_{sec_file} folder)"
  echo " created: Mark Bemelmans 23/03/2021, Bristol"
  echo " updated to seperate function: Mark Bemelmans 08/09/2022, Vanocuver, WA"
  exit
endif

if ($#argv < 8) then
  echo "Required number of input arguments have not been specified."
  echo "Type 'slc_coreg_with_dem_v3' for help."
  exit(-1)
endif

if ($#argv > 8) then
  echo "Too many input arguments."
  echo "Type 'slc_coreg_with_dem_v3' for help."
  exit(-1)
endif

echo "step 1: read inputs"
# DEM params
set ref_file = $1 # ex: c20200121
set sec_file = $2 # ex: c20200127
set DEM = $3      # ex: SRTM_30m.dem
set DEM_PAR = $4  # ex: SRTM_30m.dem_par
set demlat = $5   # ex: 1 or 3
set demlon = $6   # ex: 1 or 3
set RLKS = $7     # ex: 1 or 6
set ALKS = $8     # ex: 1 or 2

# check input using regex
if (`echo $ref_file | egrep  -c '[a-z][0-9]{8}'` == 0) then
  source report_error -1 $ref_file
  exit(-1)
endif

if (`echo $sec_file | egrep  -c '[a-z][0-9]{8}'` == 0) then
  source report_error -1 $sec_file
  exit(-1)
endif

if (-e "$DEM" != 1) then
  source report_error -4 $DEM
  exit(-1)
endif

if (`echo $DEM | egrep  -c 'dem$'` == 0) then
  source report_error -5 $DEM
  exit(-1)
endif

if (-e "$DEM_PAR" != 1) then
  source report_error -4 $DEM_PAR
  exit(-1)
endif

if (`echo $DEM_PAR | egrep  -c 'dem_par$'` == 0) then
  source report_error -6 $DEM_PAR
  exit(-1)
endif

if (`echo $demlat | egrep  -c '\-?[0-9]+'` == 0) then
  source report_error -3 $demlat
  exit(-1)
endif

if (`echo $demlon | egrep  -c '\-?[0-9]+'` == 0) then
  source report_error -3 $demlon
  exit(-1)
endif

if (`echo $RLKS | egrep  -c '[0-9]+'` == 0) then
  source report_error -2 $RLKS
  exit(-1)
endif

if (`echo $ALKS | egrep  -c '[0-9]+'` == 0) then
  source report_error -2 $ALKS
  exit(-1)
endif

set PAIRNAME = ${ref_file}_$sec_file

# if (-e "PO_SBAS_PAIRS/$PAIRNAME" == 1) then
#   rm -rf PO_SBAS_PAIRS/$PAIRNAME
# endif
#
# if (-e "PO_SBAS_PAIRS/$PAIRNAME" == 0) then
#   mkdir PO_SBAS_PAIRS/$PAIRNAME
# endif
set PWD = `pwd`
set LOG = "$PWD/slc_coreg_with_dem_v3_$PAIRNAME.log"
rm -rf $LOG
date
date > $LOG
echo " " >> $LOG
echo "slc_coreg_with_dem_v3 $ref_file $sec_file $DEM $DEM_PAR $RLKS $ALKS" >> $LOG
echo " " >> $LOG


echo "step 2: go into OFFSET_PAIRS folder and make pair specific folder + link to slc and mli files form cyyymmdd folders"
cd PO_SBAS_PAIRS

mkdir holder
cd holder

# make usefull links
ln -s ../../RSLC/$ref_file.* .
ln -s ../../$sec_file/$sec_file.* .
# ln -s ../$ref_file.*
############ Co-registration #################
# comments above each function indicate examples from gamma co-registration example in GEO and DIFF user guides (v2.0 2017)

echo "step 3.1: create simulated intensity image from DEM and ref.mli orbit data + rough look-up table for stransformation ref.mli and DEM"
# gc_map 25394.mli.par â€“ Nevada.dem_par Nevada.dem LasVegas.dem_par LasVegas.dem LasVegas.rough.utm_to_rdc 1 1 LasVegas.utm.sim_sar

# echo "gc_map ${ref_file}.rmli.par - $DEM_PAR $DEM $ref_file.dem_seg.par $ref_file.dem_seg $ref_file.rough.map_to_rdc $demlat $demlon sim_sar >> $LOG"
# gc_map ${ref_file}.rmli.par - $DEM_PAR $DEM $ref_file.dem_seg.par $ref_file.dem_seg $ref_file.rough.map_to_rdc $demlat $demlon sim_sar >> $LOG
# echo " "

set gc_map2_cmd = "gc_map2 ${ref_file}.rmli.par $DEM_PAR $DEM $ref_file.dem_seg.par $ref_file.dem_seg $ref_file.rough.map_to_rdc $demlat $demlon - - - - - sim_sar"
echo $gc_map2_cmd >> $LOG
eval $gc_map2_cmd >> $LOG

echo "step 3.2: geocode simulated intensity with rough ref.mli-DEM look-up table"
# geocode LasVegas.rough.utm_to_rdc LasVegas.utm.sim_sar 2226 LasVegas.sim_sar 2500 1800 1 0
set map_width = `awk '$1 == "width:" {print $2}' ${ref_file}.dem_seg.par`
set width = `awk '$1 == "range_samples:" {print $2}' ${ref_file}.rmli.par`
set lines = `awk '$1 == "azimuth_lines:" {print $2}' ${ref_file}.rmli.par`
set geocode_cmd = "geocode $ref_file.rough.map_to_rdc sim_sar $map_width sim_sar.rdc $width $lines 0 0"
echo $geocode_cmd >> $LOG
eval $geocode_cmd >> $LOG
echo " "


# sim_sar needs to have the same dimensions as ref.mli

echo "step 3.3: determine offset polynomials between simulated intensity and ref.mli"
# create_diff_par 25394.mli.par - 25394.diff_par 1
set create_diff_par_cmd =  "create_diff_par ${ref_file}.rmli.par - ${ref_file}.diff_par 1 0 "
echo $create_diff_par_cmd >> $LOG
eval $create_diff_par_cmd >> $LOG


# init_offsetm 25394.mli LasVegas.sim_sar 25394.diff_par
set init_offsetm_cmd =  "init_offsetm ${ref_file}.rmli sim_sar.rdc ${ref_file}.diff_par"
echo $init_offsetm_cmd >> $LOG
eval $init_offsetm_cmd >> $LOG

# offset_pwrm <MLI-1>   <MLI-2>          <DIFF_par>     <offs> <ccp> [rwin] [azwin] [offsets] [n_ovr] [nr] [naz] [thres] [lanczos] [bw_frac] [pflag] [plt_flag] [ccs] [std_mean]
# offset_pwrm 25394.mli LasVegas.sim_sar 25394.diff_par offs   ccp   512    512     offsets   1       8    8     0.15
set offset_pwrm_cdm =  "offset_pwrm  ${ref_file}.rmli sim_sar.rdc ${ref_file}.diff_par offs ccp 512 512 offsets 1 16 16 0.2 7 - - - -"
echo $offset_pwrm_cdm >>$LOG
eval $offset_pwrm_cdm >>$LOG


# offset_fitm offs ccp 25394.diff_par coffs coffsets 0.15 3
set init_offsetm_cmd = "offset_fitm offs ccp ${ref_file}.diff_par coffs coofsets 0.2 4"
echo $init_offsetm_cmd >> $LOG
eval $init_offsetm_cmd >> $LOG


# offset_pwrm 25394.mli LasVegas.sim_sar 25394.diff_par offs ccp 128 128 offsets 2 24 24 0.15
set offset_pwrm_cdm =  "offset_pwrm  ${ref_file}.rmli sim_sar.rdc ${ref_file}.diff_par offs ccp 256 256 offsets 1 32 32 0.2 7 - - - - "
echo $offset_pwrm_cdm >>$LOG
eval $offset_pwrm_cdm >>$LOG

# offset_fitm offs ccp 25394.diff_par coffs coffsets .15 3
set init_offsetm_cmd = "offset_fitm offs ccp ${ref_file}.diff_par coffs coofsets 0.2 4"
echo $init_offsetm_cmd >> $LOG
eval $init_offsetm_cmd >> $LOG


# offset_pwrm 25394.mli LasVegas.sim_sar 25394.diff_par offs ccp 128 128 offsets 2 24 24 0.15
set offset_pwrm_cdm =  "offset_pwrm  ${ref_file}.rmli sim_sar.rdc ${ref_file}.diff_par offs ccp 128 128 offsets 1 64 64 0.2 7 - - - - "
echo $offset_pwrm_cdm >>$LOG
eval $offset_pwrm_cdm >>$LOG

# offset_fitm offs ccp 25394.diff_par coffs coffsets .15 3
set init_offsetm_cmd = "offset_fitm offs ccp ${ref_file}.diff_par coffs coofsets 0.2 4"
echo $init_offsetm_cmd >> $LOG
eval $init_offsetm_cmd >> $LOG

echo "step 3.4: refine rough sim_sar-ref.mli look-up table using offset polynoimals stored in $ref_file.diff_par"
# gc_map_fine LasVegas.rough.utm_to_rdc 2226 25394.diff_par LasVegas.utm_to_rdc 0
set gc_map_fine_cmd =  "gc_map_fine $ref_file.rough.map_to_rdc $map_width ${ref_file}.diff_par $ref_file.map_to_rdc 0 "
echo $gc_map_fine_cmd >> $LOG
eval $gc_map_fine_cmd >> $LOG


# use this part to check if geocoding the mli into DEM coordinates looks right. (therefore also converting dem into sar will go well)
# # geocode_back 25394.mli 2500 LasVegas.utm_to_rdc 25394.mli.utm 2226 1796 2 0
# echo "geocode_back ${ref_file}.mli $width $ref_file.map_to_rdc ${ref_file}.pwr1 $map_width - >> $LOG"
# geocode_back ${ref_file}.mli $width $ref_file.map_to_rdc ${ref_file}.pwr1 $map_width - >> $LOG
# echo " "

echo "step 3.5: create dem in radar coordinates of ref.mli using refined sim_sar-ref.mli look-up table" | tee -a $LOG
# geocode LasVegas.utm_to_rdc LasVegas.dem 2226 25394.dem 2500 1800 1 0
set geocode_cmd = "geocode $ref_file.map_to_rdc $ref_file.dem_seg $map_width $ref_file.dem.rdc $width $lines 0 0"
echo $geocode_cmd >> $LOG
eval $geocode_cmd >> $LOG
# dem.rdc needs to have the exact same dimenstions as ref.mli, this is the function of width and lines variables here


echo "step 3.6: using both mli and DEM in ref.mli radar coordinates, create roughly look-up table between ref.mli and sec.mli" | tee -a $LOG
# generate look-up table for mli2 into mli1 using DEM information
set rdc_trans_cmd = "rdc_trans ${ref_file}.rmli.par $ref_file.dem.rdc $sec_file.mli.par ${ref_file}.mli2.rough.map_to_rdc"
echo $rdc_trans_cmd >> $LOG
eval $rdc_trans_cmd >> $LOG


echo "step 3.7: geocode ref.mli with ref.mli-sec.mli rough look-up table"
# geocode lt0 25394.mli 2500 mli0 2500 1800 2 0
set width2 = `awk '$1 == "range_samples:" {print $2}' ${sec_file}.mli.par`
set lines2 = `awk '$1 == "azimuth_lines:" {print $2}' ${sec_file}.mli.par`

set geocode_cmd =  "geocode ${ref_file}.mli2.rough.map_to_rdc ${ref_file}.rmli $width mli0 $width2 $lines2 2 0"
echo $geocode_cmd >> $LOG
eval $geocode_cmd >> $LOG


echo "step 3.8: determine offset polynomials between geocoded ref.mli (now in coordinates of sec.mli) and  sec.mli" | tee -a $LOG
# create_diff_par 05721.mli.par - diff0 1
set create_diff_par_cmd = "create_diff_par ${sec_file}.mli.par - diff0 1 0"
echo $create_diff_par_cmd >> $LOG
eval $create_diff_par_cmd >> $LOG

# init_offsetm mli0 05721.mli diff0 1 1
set init_offsetm_cmd =  "init_offsetm mli0 ${sec_file}.mli diff0 1 1"
echo $init_offsetm_cmd >> $LOG
eval $init_offsetm_cmd >> $LOG


# offset_pwrm mli0 05721.mli diff0 offs0 ccp0 256 256 offsets 2 16 16
set offset_pwrm_cdm = "offset_pwrm mli0 ${sec_file}.mli diff0 offs0 ccp0 256 256 offsets 2 16 16"
echo $offset_pwrm_cdm >> $LOG
eval $offset_pwrm_cdm >> $LOG

# offset_fitm offs0 ccp0 diff0 coffs0 coffsets0 7. 4
set offset_fitm_cmd = "offset_fitm offs0 ccp0 diff0 coff0 coffsets0 0.2 4"
echo $offset_fitm_cmd >> $LOG
eval $offset_fitm_cmd >> $LOG



# offset_pwrm mli0 05721.mli diff0 offs0 ccp0 256 256 offsets 2 16 16
set offset_pwrm_cmd =  "offset_pwrm mli0 ${sec_file}.mli diff0 offs0 ccp0 128 128 offsets 2 32 32"
echo $offset_pwrm_cmd >> $LOG
eval $offset_pwrm_cmd >> $LOG

# offset_fitm offs0 ccp0 diff0 coffs0 coffsets0 7. 4
set offset_fitm_cmd = "offset_fitm offs0 ccp0 diff0 coff0 coffsets0 0.2 4"
echo $offset_fitm_cmd >> $LOG
eval $offset_fitm_cmd >> $LOG

echo "step 3.9: use offset polynomials to refine look-up table between ref.mli and sec.mli" | tee -a $LOG
# gc_map_fine lt0 2500 diff0 lt1
set gc_map_fine_cmd = "gc_map_fine ${ref_file}.mli2.rough.map_to_rdc $width diff0 ${ref_file}.mli2.map_to_rdc"
echo $gc_map_fine_cmd >> $LOG
eval $gc_map_fine_cmd >> $LOG


# create rmli with topo correction
echo "step 4.1: resample sec.slc in coordinates of ref.slc, will still be imporved upon using further offset polynomials" | tee -a $LOG
# exit(-1)
# SLC_interp_lt     <SLC-2>       <SLC1_par>        <SLC2_par>        <lookup_table>               <mli1_par>         <MLI2_par> <DIFF_par> <SLC-2R> <SLC2R_par> [number of blocks (128)] [mode] [order]
set SLC_interp_lt_cmd = "SLC_interp_lt $sec_file.slc $ref_file.rslc.par $sec_file.slc.par ${ref_file}.mli2.map_to_rdc ${ref_file}.rmli.par $sec_file.mli.par - $sec_file.rslc0 $sec_file.rslc0.par - 0 5"
echo $SLC_interp_lt_cmd >> $LOG
eval $SLC_interp_lt_cmd >> $LOG


echo "step 4.2: estimate offset polynomials between ref.slc and resampled sec.slc (sec.rslc)" | tee -a $LOG
# create_offset 25394.slc.par 05721.rslc0.par off 1
set create_offset_cmd = "create_offset ${ref_file}.rslc.par $sec_file.rslc0.par off 1 1 1 0"
echo $create_offset_cmd >> $LOG
eval $create_offset_cmd >> $LOG


# offset_pwr 25394.slc 05721.rslc0 25394.slc.par 05721.rslc0.par off offs ccp 128 128 offsets 2 32 64
# offset_pwrm mli0 ${sec_file}.mli diff0 offs0 ccp0 256 256 offsets 2 16 16 >> $LOG
set offset_pwr_cmd = "offset_pwr ${ref_file}.rslc $sec_file.rslc0 ${ref_file}.rslc.par $sec_file.rslc0.par off offs ccp 128 128 offsets 2 64 64"
echo $offset_pwr_cmd >> $LOG
eval $offset_pwr_cmd >> $LOG


# offset_fit offs ccp off coffs coffsets 0.15 4
# offset_fitm offs0 ccp0 diff0 coff0 coffsets0 0.2 4 >> $LOG
set offset_fit_cmd = "offset_fit offs ccp off coffs coffsets 0.15 4"
echo $offset_fit_cmd >> $LOG
eval $offset_fit_cmd >> $LOG


echo "step 4.3: redo resampling of sec.mli using estimated offset polynomials" | tee -a $LOG
# SLC_interp_lt 05721.slc 25394.slc.par 05721.slc.par lt1 25394.mli.par 05721.mli.par off 05721.rslc 05721.rslc.par - 0 5
set SLC_interp_lt_cmd = "SLC_interp_lt $sec_file.slc $ref_file.rslc.par $sec_file.slc.par ${ref_file}.mli2.map_to_rdc ${ref_file}.rmli.par $sec_file.mli.par off $sec_file.rslc $sec_file.rslc.par - 0 5"
echo $SLC_interp_lt_cmd >> $LOG
eval $SLC_interp_lt_cmd >> $LOG


echo "step 5: make mli from sec_file.rslc" | tee -a $LOG
set multi_look_cmd = "multi_look $sec_file.rslc $sec_file.rslc.par $sec_file.rmli $sec_file.rmli.par $RLKS $ALKS"
echo $multi_look_cmd >> $LOG
eval $multi_look_cmd >> $LOG


# echo "step 6: convert ref.mli and sec.rmli to ras for visual inspection"
# echo "raspwr $ref_file.rili $width ; raspwr $sec_file.rmli $width"
# raspwr $ref_file.rmli $width
# raspwr $sec_file.rmli $width

echo "step 6: move RSLC and RMLI to ./RSLC folder"
# mv ./$ref_file.rslc ../../RSLC/$ref_file.rslc
# mv ./$ref_file.rslc.par ../../RSLC/$ref_file.rslc.par
# mv ./$ref_file.rmli ../../RSLC/$ref_file.rmli
# mv ./$ref_file.rmli.par ../../RSLC/$ref_file.rmli.par
mv ./$sec_file.rslc ../../RSLC/$sec_file.rslc
mv ./$sec_file.rslc.par ../../RSLC/$sec_file.rslc.par
mv ./$sec_file.rmli ../../RSLC/$sec_file.rmli
mv ./$sec_file.rmli.par ../../RSLC/$sec_file.rmli.par

echo "step 8: delete temporary ./holder folder"
cd ..
rm -rf ./holder
cd ..
